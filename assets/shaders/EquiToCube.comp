#version 450

layout (set = 0, binding = 0, Rgba32f) uniform writeonly imageCube resultImage;

layout(set = 0, binding = 1) uniform sampler2D environment;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

#define RIGHT 0
#define LEFT 1
#define BOTTOM 2
#define TOP 3
#define FRONT 4
#define BACK 5

void main()
{
    uint sideId = gl_GlobalInvocationID.z;
    uvec2 index = gl_GlobalInvocationID.xy;

    ivec3 outCoord = ivec3(index.x, index.y, sideId);

    vec2 ts = vec2(index.x, index.y) + vec2(0.5);
    ts = ts / vec2(imageSize(resultImage));
    ts = 2.0 * ts - 1.0;

    vec3 dir;

    switch(sideId)
    {
        case TOP:    {dir = vec3(ts.x, -1.0, -ts.y); break;}
        case BOTTOM: {dir = vec3(ts.x,  1.0, ts.y); break;}
        case RIGHT:  {dir = vec3( 1.0, -ts.y, -ts.x); break;}
        case LEFT:   {dir = vec3(-1.0, -ts.y, ts.x); break;}
        case FRONT:  {dir = vec3(ts.x, -ts.y,  1.0); break;}
        case BACK:   {dir = vec3(-ts.x, -ts.y, -1.0); break;}
    }

    dir = normalize(dir);

    const float pi = 3.141592535;

    vec2 texCoord;
    texCoord.y = asin(dir.y) / pi + 0.5;
    texCoord.x = atan(dir.x, dir.z) / (2.0*pi) + 0.5;

    vec4 res = texture(environment, texCoord);

    //Debug side visualization
    //switch(sideId)
    //{
    //    case TOP:    {res = vec4(0,1,0,1); break;}
    //    case BOTTOM: {res = vec4(1,0,1,1); break;}
    //    case RIGHT:  {res = vec4(1,0,0,1); break;}
    //    case LEFT:   {res = vec4(0,1,1,1); break;}
    //    case FRONT:  {res = vec4(0,0,1,1); break;}
    //    case BACK:   {res = vec4(1,1,0,1); break;}
    //}

    imageStore(resultImage, outCoord, res);
}