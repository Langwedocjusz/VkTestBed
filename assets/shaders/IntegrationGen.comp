#version 450

#extension GL_GOOGLE_include_directive : require

const float PI = 3.14159265359;

#include "common/Pbr.glsl"
#include "common/PbrIbl.glsl"

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (set = 0, binding = 0, Rgba32f) uniform writeonly image2D integrationMap;

vec2 IntegrateBRDF(float NoV, float roughness)
{
    vec3 V = vec3(
        sqrt(1.0 - NoV*NoV),
        0.0,
        NoV
    );

    float A = 0.0;
    float B = 0.0;

    vec3 N = vec3(0.0, 0.0, 1.0);

    const uint SAMPLE_COUNT = 1024;

    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NoL = max(L.z, 0.0);

        if(NoL > 0.0)
        {
            float NoH = max(H.z, 0.0);
            float VoH = max(dot(V, H), 0.0);
            float NoL = max(dot(N,L), 0.0);

            float G = G_SmithGGXCorrelated(NoV, NoL, roughness);
            float G_Vis = (G * VoH) / (NoH * NoV);
            float Fc = pow(1.0 - VoH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }

    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);

    return vec2(A, B);
}

void main()
{
    uvec2 index = gl_GlobalInvocationID.xy;

    ivec2 outCoord = ivec2(index);
    vec2 ts = (vec2(index) + 0.5 )/ vec2(imageSize(integrationMap));

    vec2 integratedBRDF = IntegrateBRDF(ts.x, ts.y);

    vec4 res = vec4(integratedBRDF.x, integratedBRDF.y, 0.0, 0.0);

    imageStore(integrationMap, outCoord, res);
}