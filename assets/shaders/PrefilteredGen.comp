#version 450

#extension GL_GOOGLE_include_directive : require

#include "common/Cubemap.glsl"

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform samplerCube cubemap;

layout (set = 0, binding = 1, Rgba32f) uniform writeonly imageCube resultPrefiltered;

layout(push_constant) uniform constants {
    uint CubeResolution;
    uint MipLevel;
    float Roughness;
 }  PushConstants;

const float PI = 3.14159265359;

vec2 GetCoordsCentered(uvec2 texelCoord)
{
    //Converts texel coord to [-1,1] coordinates.
    vec2 ts = vec2(texelCoord) + vec2(0.5);
    ts = ts / vec2(imageSize(resultPrefiltered));
    ts = 2.0 * ts - 1.0;

    return ts;
}

//Importance sampled low discrepancy monte carlo integration
//based on: https://learnopengl.com/PBR/IBL/Specular-IBL

float RadicalInverse_VdC(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
    return vec2(float(i)/float(N), RadicalInverse_VdC(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
{
    float a = roughness*roughness;
	
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
    // from spherical coordinates to cartesian coordinates
    vec3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;
	
    // from tangent-space vector to world-space sample vector
    vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
    vec3 tangent   = normalize(cross(up, N));
    vec3 bitangent = cross(N, tangent);
	
    vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}  

float DistributionGGX(vec3 N, vec3 H, float roughness)
{
    float a = roughness*roughness;
    float a2 = a*a;
    float NdotH = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

void main()
{
    const uint SAMPLE_COUNT = 1024;

    uint sideId = gl_GlobalInvocationID.z;
    uvec2 index = gl_GlobalInvocationID.xy;

    ivec3 outCoord = ivec3(index.x, index.y, sideId);

    vec2 ts = GetCoordsCentered(index);
    vec3 dir = GetCubemapDir(ts, sideId);

    vec3 N = dir;    
    vec3 R = N;
    vec3 V = R;

    float roughness = PushConstants.Roughness;
    float resolution = float(PushConstants.CubeResolution);

    float totalWeight = 0.0;   
    vec3 prefilteredColor = vec3(0.0);

    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(dot(N, L), 0.0);

        if(NdotL > 0.0)
        {
            float D = DistributionGGX(N, H, roughness);
            float NdotH = max(dot(N, H), 0.0);
            float HdotV = max(dot(H, V), 0.0);
            float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;

            float saTexel  = 4.0 * PI / (6.0 * resolution * resolution);
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);

            float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel); 

            vec3 envSample = textureLod(cubemap, L, mipLevel).rgb;

            //Ad hoc signal clamping:
            envSample = clamp(envSample, vec3(0), vec3(1000));

            prefilteredColor += envSample * NdotL;
            totalWeight      += NdotL;
        }
    }

    prefilteredColor = prefilteredColor / totalWeight;

    vec4 res = vec4(prefilteredColor, 0.0);

    imageStore(resultPrefiltered, outCoord, res);
}