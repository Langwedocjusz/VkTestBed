#version 450

#extension GL_GOOGLE_include_directive : require

const float PI = 3.14159265359;

#include "common/Pbr.glsl"
#include "common/PbrIbl.glsl"
#include "common/Cubemap.glsl"

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform samplerCube cubemap;

layout (set = 0, binding = 1, Rgba32f) uniform writeonly imageCube resultPrefiltered;

layout(push_constant) uniform constants {
    uint CubeResolution;
    uint MipLevel;
    float Roughness;
 }  PushConstants;

vec2 GetCoordsCentered(uvec2 texelCoord)
{
    //Converts texel coord to [-1,1] coordinates.
    vec2 ts = vec2(texelCoord) + vec2(0.5);
    ts = ts / vec2(imageSize(resultPrefiltered));
    ts = 2.0 * ts - 1.0;

    return ts;
}

void main()
{
    const uint SAMPLE_COUNT = 1024;

    uint sideId = gl_GlobalInvocationID.z;
    uvec2 index = gl_GlobalInvocationID.xy;

    ivec3 outCoord = ivec3(index.x, index.y, sideId);

    vec2 ts = GetCoordsCentered(index);
    vec3 dir = GetCubemapDir(ts, sideId);

    vec3 N = dir;    
    vec3 R = N;
    vec3 V = R;

    float roughness = PushConstants.Roughness;
    float resolution = float(PushConstants.CubeResolution);

    float totalWeight = 0.0;   
    vec3 prefilteredColor = vec3(0.0);

    for(uint i = 0u; i < SAMPLE_COUNT; ++i)
    {
        vec2 Xi = Hammersley(i, SAMPLE_COUNT);
        vec3 H  = ImportanceSampleGGX(Xi, N, roughness);
        vec3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NoL = max(dot(N, L), 0.0);

        if(NoL > 0.0)
        {
            float NoH = max(dot(N, H), 0.0);
            float VoH = max(dot(H, V), 0.0);

            float D = D_GGX(NoH, roughness);
            float pdf = D * NoH / (4.0 * VoH) + 0.0001;

            float saTexel  = 4.0 * PI / (6.0 * resolution * resolution);
            float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);

            float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel); 

            vec3 envSample = textureLod(cubemap, L, mipLevel).rgb;

            //Ad hoc signal clamping:
            envSample = clamp(envSample, vec3(0), vec3(20));

            prefilteredColor += envSample * NoL;
            totalWeight      += NoL;
        }
    }

    prefilteredColor = prefilteredColor / totalWeight;

    vec4 res = vec4(prefilteredColor, 0.0);

    imageStore(resultPrefiltered, outCoord, res);
}